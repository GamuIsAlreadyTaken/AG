Autor: 
	Victor Diez Ruiz - v.druiz

La realización de esta practica del examen propone el análisis de un algoritmo de ordenación de un
vector dependiendo del orden inicial de este. Los casos analizados son:
        - vector ordenado descendentemente
        - Vector ordenado ascendentemente
        - Vector ordenado aleatoriamente

Las medidas están realizadas en microsegundos. Si la medida del tiempo de ejecución es menor a
500 microsegundos se realiza automáticamente un bucle de 1000 iteraciones del algoritmo a analizar
y se calcula la media de los tiempos tardados. En este caso se indicará con '*' en la tabla.

Todo esto se realiza varias veces y los mejores resultados obtenidos, reflejados en este
informe, se han conseguido en una maquina con las siguientes características:

        Azure
        Procesador AMD EPYC 2.7 GHz doble nucleo
        Memoria RAM 8Gb 4890 MHz

MEDICIONES:

Unidades de las medidas de tiempo:
- µs (microsegundos)

# Ordenacion Rapida. INICIALIZACIÓN DESCENDENTE :

           n            t(n)         t(n)/n^1.8        t(n)/n^2      t(n)/n^2.2
 (*)     500      133.07400           0.0018448       0.0005323       0.0001536
        1000      541.00000           0.0021538       0.0005410       0.0001359
        2000     1970.00000           0.0022522       0.0004925       0.0001077
        4000     7752.00000           0.0025451       0.0004845       0.0000922
        8000    30634.00000           0.0028883       0.0004787       0.0000793
       16000   158621.00000           0.0042948       0.0006196       0.0000894
       32000   550155.00000           0.0042777       0.0005373       0.0000675

- Cotas: <n^1.8, n^2, n^2.2>

 	- Cota subestimada  : f(n) = n^1.8
 	- Cota ajustada     : g(n) = n^2 
 	- Cota sobrestimada : h(n) = n^2.2

- t(n) / f(n) cuando n -> infinito ---> infinito (divergente)
- t(n) / g(n) cuando n -> infinito ---> Valor constante = 0.0005
- t(n) / h(n) cuando n -> infinito ---> 0 (convergente)


# Ordenacion Rapida. INICIALIZACIÓN ASCENDENTE :

           n           t(n)          t(n)/n^1.8        t(n)/n^2      t(n)/n^2.2
 (*)     500       77.56800           0.0010753       0.0003103       0.0000895
 (*)    1000      293.48400           0.0011684       0.0002935       0.0000737
        2000     1180.00000           0.0013490       0.0002950       0.0000645
        4000     4560.00000           0.0014971       0.0002850       0.0000543
        8000    18004.00000           0.0016975       0.0002813       0.0000466
       16000    79052.00000           0.0021404       0.0003088       0.0000446
       32000   292090.00000           0.0022712       0.0002852       0.0000358

- Cotas: <n^1.8, n^2, n^2.2>

 	- Cota subestimada  : f(n) = n^1.8
 	- Cota ajustada     : g(n) = n^2
 	- Cota sobrestimada : h(n) = n^2.2

- t(n) / f(n) cuando n -> infinito ---> infinito (divergente)
- t(n) / g(n) cuando n -> infinito ---> Valor constante = 0.00030
- t(n) / h(n) cuando n -> infinito ---> 0 (convergente)


# Ordenacion Rapida. INICIALIZACIÓN ALEATORIA :


           n           t(n)             t(n)/n      t(n)/nlogn      t(n)/n^1.3
 (*)     500       34.74800           0.0694960       0.0111827       0.0107713
 (*)    1000       74.60500           0.0746050       0.0108002       0.0093922
 (*)    2000      155.59800           0.0777990       0.0102355       0.0079555
 (*)    4000      349.92200           0.0874805       0.0105474       0.0072660
        8000      733.00000           0.0916250       0.0101951       0.0061814
       16000     1575.00000           0.0984375       0.0101688       0.0053942
       32000     3295.00000           0.1029687       0.0099261       0.0045831

- Cotas: <n, nlogn, n^1.3>

 	- Cota subestimada  : f(n) = n
 	- Cota ajustada     : g(n) = nlogn 
 	- Cota sobrestimada : h(n) = n^1.3

- t(n) / f(n) cuando n -> infinito ---> infinito (divergente)
- t(n) / g(n) cuando n -> infinito ---> Valor constante = 0.010
- t(n) / h(n) cuando n -> infinito ---> 0 (convergente)



CONCLUSIÓN:
    Tras comprobar empiricamente la complejidad temporal del algoritmo en 
    los 3 casos, ascendente, descendente, y aleatorio, podemos ver que este
    algoritmo comparado con, insercion, es mas rapido en todos los casos salvo
    cuando ya está ordenado, mientras que comparado con shell, es peor en
    todos los casos.
    No es tan bueno como insertion sort al ordenar vectores casi ordenados, y
    es peor que shell sort en todos los casos.
     - Espacio: ordena en el lugar
     - Dependencia: depende de la entrada
     - Estabilidad: no ha sido comprobado