PRACTICA 4-ALGORITMOS-UDC
Autores:
	Noelia Serrano Abraldes - noelia.serrano
	Victor Diez Ruiz - v.druiz
	Ismael Miguez Valero - i.miguezv

Para la realización de la tercera practica (P4) nos propone calcular el camino mínimo 
de los vértices de un grafo completo ponderado mediante el algoritmo de Dijkstra.
El grafo se representa mediante su matriz de adyacencia generada de manera aleatoria.

Las medidas están realizadas en microsegundos. Si la medida del tiempo de ejecución 
es menor a 500 microsegundos se realiza automáticamente un bucle de 1000 iteraciones del 
algoritmo a analizar y se calcula la media de los tiempos. De ser así se indicará con '(*)' 
en la tabla.

Todo esto se realiza en tres maquinas diferentes y los mejores resultados obtenidos, 
reflejados en este informe,se consiguieron en una maquina con las siguientes características:

        LENOVO ideapad 330
        Procesador Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz
        Memoria RAM 8 Gb 2133 MHz DDR4 Síncrono

COMPROBACION ALGORITMO DE DIJKSTRA
Input:
 0  1  8  4  7
 1  0  2  6  5
 8  2  0  9  5
 4  6  9  0  3
 7  5  5  3  0
Target:
 0  1  3  4  6
 1  0  2  5  5
 3  2  0  7  5
 4  5  7  0  3
 6  5  5  3  0
Result:
 0  1  3  4  6
 1  0  2  5  5
 3  2  0  7  5
 4  5  7  0  3
 6  5  5  3  0

Input:
 0  1  4  7
 1  0  2  8
 4  2  0  3
 7  8  3  0
Target:
 0  1  3  6
 1  0  2  5
 3  2  0  3
 6  5  3  0
Result:
 0  1  3  6
 1  0  2  5
 3  2  0  3
 6  5  3  0



MEDICIONES:

Unidades de las medidas de tiempo:
- µs (microsegundos)

# ALGORITMO DE DIJKSTRA

[Tabla]
           n           t(n)	     t(n)/n^2.7	     t(n)/n^2.9	     t(n)/n^3.1
 (*)      16       60.96200	      0.0341928	      0.0196386	      0.0112794
 (*)      32      299.08700	      0.0258162	      0.0129081	      0.0064541
          64     1834.00000	      0.0243620	      0.0106042	      0.0046157
         128    11937.00000	      0.0244022	      0.0092467	      0.0035038
         256    88293.00000	      0.0277766	      0.0091628	      0.0030226
         512   673013.00000	      0.0325833	      0.0093571	      0.0026871
        1024  5430684.00000	      0.0404617	      0.0101154	      0.0025289

- Cotas: < n^2.7, n^2.9, n^3.1 >

 	- Cota subestimada  : f(n) = n^2.7
 	- Cota ajustada     : g(n) = n^2.9 
 	- Cota sobrestimada : h(n) = n^3.1

- t(n) / f(n) cuando n -> infinito ---> infinito (divergente)
- t(n) / g(n) cuando n -> infinito ---> Valor constante = [~0.009]
- t(n) / h(n) cuando n -> infinito ---> 0 (convergente)

+ [Anomalias]
Los resultados obtendios con n pequeña (n=16 y n=32) son resultados poco
confiables  y sin ajustar al valor constante. Este hecho es posiblemente debido
al numero de errores que se producen en memoria cache o procesos intenros al ejecutar
las 1000 iteraciones de cálculo. El coste de acceso a memoria desvirtúa la medida
obtenida.

CONCLUSIÓN:
Tras analizar las diferentes partes del algoritmo y obtener 
empíricamente los tiempos podemos ver que:

Al necesitar tanto espacio en memoria, los procesos internos del 
sistema operativo afectan mucho a los resultados, haciendo que las 
mediciones sean volatiles, cuanto mas grande, o mas veces se repitan,
las mediciones mas posible es que los procesos internos del sistema 
interfieran con las mediciones inflando los tiempos.
